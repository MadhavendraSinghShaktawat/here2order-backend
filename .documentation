{}

# Here2Order API Documentation

## Base URL

http://localhost:3000/api/v1

## Authentication

### Register Restaurant Admin

Register a new restaurant admin and create their restaurant.

======================================================================
POST /auth/signup

#### Request Body

json
{
"email": "restaurant1@example.com",
"password": "Password123!",
"name": "John Doe",
"phone": "+1234567890",
"restaurant": {
"name": "The Great Restaurant",
"address": {
"street": "123 Main St",
"city": "New York",
"state": "NY",
"postalCode": "10001",
"country": "USA"
},
"contact": {
"phone": "+1234567890",
"email": "contact@restaurant.com"
}
}
}

#### Response (201 Created)

json
{
"status": "success",
"data": {
"user": {
"id": "65f1a2b3c4d5e6f7g8h9i0j1",
"email": "restaurant1@example.com",
"name": "John Doe",
"role": "Restaurant_Admin",
"restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2"
},
"token": "eyJhbGciOiJIUzI1NiIsInR5..."
}
}

======================================================================

======================================================================

### Login

Login with email and password.

#### Request Body

json
{
"email": "restaurant1@example.com",
"password": "Password123!"
}

#### Response (200 OK)

json
{
"status": "success",
"data": {
"user": {
"id": "65f1a2b3c4d5e6f7g8h9i0j1",
"email": "restaurant1@example.com",
"name": "John Doe",
"role": "Restaurant_Admin",
"restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2"
},
"token": "eyJhbGciOiJIUzI1NiIsInR5..."
}
}
======================================================================
======================================================================

## Restaurant Management

### Get Restaurant Details

Get details of a specific restaurant.

GET /restaurants/:id

#### Headers

Authorization: Bearer <jwt_token>

#### Response (200 OK)

json
{
"status": "success",
"data": {
"id": "65f1a2b3c4d5e6f7g8h9i0j2",
"name": "The Great Restaurant",
"adminId": "65f1a2b3c4d5e6f7g8h9i0j1",
"address": {
"street": "123 Main St",
"city": "New York",
"state": "NY",
"postalCode": "10001",
"country": "USA"
},
"contact": {
"phone": "+1234567890",
"email": "contact@restaurant.com"
},
"businessHours": [
{
"day": "Monday",
"open": "09:00",
"close": "17:00",
"isClosed": false
},
// ... other days
],
"isActive": true,
"settings": {
"currency": "USD",
"language": "en",
"timezone": "UTC",
"tableCount": 0
}
}
}
======================================================================
======================================================================

POST /api/v1/staff/invite
{
"email": "staff@example.com",
"name": "Staff Member",
"phone": "+1234567890",
"position": "Waiter"
}

Get all staff members

GET /api/v1/staff

# ======================================================================

## Testing with Postman

### Setting Up Postman

1. Create a new Postman Collection named "Here2Order API"
2. Set up environment variables:
   - `BASE_URL`: http://localhost:3000/api/v1
   - `TOKEN`: (This will be automatically set after login)

### Test Flow

1. **Register Restaurant Admin**

   - Method: POST
   - URL: {{BASE_URL}}/auth/signup
   - Body: raw (JSON)
   - Copy the request body from the documentation above
   - Send request
   - Verify 201 status code
   - Save the token from response

2. **Login**

   - Method: POST
   - URL: {{BASE_URL}}/auth/login
   - Body: raw (JSON)
   - Use the email and password from registration
   - Send request
   - Verify 200 status code
   - Save the token using this script in the "Tests" tab:

   ```javascript
   if (pm.response.code === 200) {
     pm.environment.set("TOKEN", pm.response.json().data.token);
   }
   ```

3. **Get Restaurant Details**
   - Method: GET
   - URL: {{BASE_URL}}/restaurants/:id
   - Headers:
     ```
     Authorization: Bearer {{TOKEN}}
     ```
   - Use the restaurantId from login response
   - Send request
   - Verify 200 status code

### Error Scenarios to Test

1. **Registration Validation**

   - Try registering with invalid email format
   - Try registering with short password
   - Try registering with existing email

2. **Login Validation**

   - Try logging in with wrong password
   - Try logging in with non-existent email

3. **Authentication**
   - Try accessing protected routes without token
   - Try accessing protected routes with invalid token
   - Try accessing protected routes with expired token

### Response Status Codes

- 200: Success
- 201: Created
- 400: Bad Request (validation errors)
- 401: Unauthorized (invalid/missing token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found
- 500: Internal Server Error

### Best Practices

1. Always check the response status code
2. Verify the response structure matches the documentation
3. Test with both valid and invalid data
4. Test authorization for all protected routes
5. Save commonly used values as environment variables
6. Use pre-request scripts for setup when needed
7. Use test scripts to validate responses

### Common Headers

## Staff Management

### 1. Invite Staff Member

Create a new staff invitation.

POST /staff/invite

#### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

#### Request Body

```json
{
  "email": "staff@example.com",
  "name": "John Smith",
  "phone": "+1234567890",
  "position": "Waiter"
}
```

#### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "email": "staff@example.com",
    "name": "John Smith",
    "phone": "+1234567890",
    "position": "Waiter",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "status": "Pending",
    "invitedBy": "65f1a2b3c4d5e6f7g8h9i0j3",
    "invitedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

### 2. Get All Staff Members

Get a list of all staff members and pending invites.

GET /staff

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": [
    {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "email": "staff@example.com",
      "name": "John Smith",
      "phone": "+1234567890",
      "position": "Waiter",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "status": "Pending",
      "invitedBy": "65f1a2b3c4d5e6f7g8h9i0j3",
      "invitedAt": "2024-03-15T10:00:00.000Z",
      "joinedAt": null
    },
    {
      "id": "65f1a2b3c4d5e6f7g8h9i0j4",
      "email": "active.staff@example.com",
      "name": "Active Staff",
      "phone": "+1234567891",
      "position": "Staff",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "status": "Active",
      "invitedBy": "",
      "invitedAt": "2024-03-14T10:30:00.000Z",
      "joinedAt": "2024-03-14T10:30:00.000Z"
    }
  ]
}
```

### 3. Update Staff Member

Update a staff member's details.

PUT /staff/:id

#### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

#### Request Body

```json
{
  "status": "Inactive",
  "position": "Senior Waiter",
  "phone": "+1234567899"
}
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "email": "staff@example.com",
    "name": "John Smith",
    "phone": "+1234567899",
    "position": "Senior Waiter",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "status": "Inactive",
    "invitedBy": "65f1a2b3c4d5e6f7g8h9i0j3",
    "invitedAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T13:00:00.000Z"
  }
}
```

### Delete Staff Member

Delete a staff member or cancel an invitation.

DELETE /staff/:id

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
id: Staff member or invitation ID
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "67b1f98277fc25672dfd8276",
    "email": "staff@example.com",
    "name": "Staff Member",
    "message": "Staff member deactivated successfully"
    // or "Staff invitation deleted successfully"
  }
}
```

#### Error Responses

```json
// 400 Bad Request
{
  "status": "error",
  "message": "Invalid staff ID"
}

// 401 Unauthorized
{
  "status": "error",
  "message": "Authentication required"
}

// 403 Forbidden
{
  "status": "error",
  "message": "Not authorized to delete staff"
}

// 404 Not Found
{
  "status": "error",
  "message": "Staff member not found"
}
```

## Error Responses

### 400 Bad Request

```json
{
  "status": "error",
  "message": "Invalid input data",
  "details": "Email is required"
}
```

### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to perform this action"
}
```

### 404 Not Found

```json
{
  "status": "error",
  "message": "Resource not found"
}
```

### 500 Internal Server Error

```json
{
  "status": "error",
  "message": "Internal server error"
}
```

## Notes

- All timestamps are in ISO 8601 format
- All IDs are MongoDB ObjectIds
- JWT tokens expire in 7 days
- Staff invites expire in 48 hours
- Phone numbers should be in E.164 format
- Only Restaurant_Admin users can manage staff
- Staff invitations are valid for 48 hours
- Staff members can be in one of these states:
  - Pending: Invitation sent but not accepted
  - Active: Staff member has joined and is active
  - Inactive: Staff member has been deactivated

=== Registered Routes ===
Authentication Routes:
POST /api/v1/auth/signup # Register new restaurant admin
POST /api/v1/auth/login # Login for restaurant admin
POST /api/v1/auth/staff/login # Login for staff members
POST /api/v1/auth/staff-register # Complete staff registration with invite
POST /api/v1/auth/logout # Logout current user

User Routes:
GET /api/v1/users # Get user profile

Staff Management Routes:
POST /api/v1/staff/invite # Create staff invitation
GET /api/v1/staff # List all staff and invitations
PUT /api/v1/staff/:id # Update staff member details
DELETE /api/v1/staff/:id # Remove staff member or cancel invite

Table Management Routes:
POST /api/v1/table # Create new table with QR code
GET /api/v1/table # List all restaurant tables
GET /api/v1/table/:id # Get specific table details
PUT /api/v1/table/:id # Update table details
DELETE /api/v1/table/:id # Delete table and QR code
=======================

### Staff Login

Login as a staff member or accept staff invitation.

POST /auth/staff/login

#### Headers

```
Content-Type: application/json
```

#### Request Body (Regular Login)

```json
{
  "email": "staff@example.com",
  "password": "Password123!"
}
```

#### Request Body (First-time Login with Invitation)

```json
{
  "email": "staff@example.com",
  "password": "Password123!",
  "inviteToken": "abc123def456..."
}
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "user": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "email": "staff@example.com",
      "name": "John Smith",
      "role": "Staff",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "position": "Waiter"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5..."
  }
}
```

### Staff Registration

Complete staff registration with invitation token.

POST /auth/staff-register

#### Headers

```
Content-Type: application/json
```

#### Request Body

```json
{
  "email": "staff@example.com",
  "password": "Password123!",
  "inviteToken": "abc123def456...",
  "phone": "+1234567890" // Optional
}
```

#### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "user": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "email": "staff@example.com",
      "name": "John Smith",
      "role": "Staff",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "position": "Waiter"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5..."
  }
}
```

#### Error Responses

```json
// 400 Bad Request
{
  "status": "error",
  "message": "Invalid or expired invitation token"
}

// 400 Bad Request
{
  "status": "error",
  "message": "User already exists"
}
```

### Table Management

#### 1. Create Table

Create a new table with QR code.

POST /table

##### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

##### Request Body

```json
{
  "tableNumber": "T001",
  "name": "Window Table 1",
  "capacity": 4
}
```

##### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "tableNumber": "T001",
    "name": "Window Table 1",
    "capacity": 4,
    "isActive": true,
    "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### 2. Get All Tables

Get a list of all tables for the restaurant.

GET /table

##### Headers

```
Authorization: Bearer <jwt_token>
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": [
    {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "tableNumber": "T001",
      "name": "Window Table 1",
      "capacity": 4,
      "isActive": true,
      "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
      "createdAt": "2024-03-15T10:00:00.000Z",
      "updatedAt": "2024-03-15T10:00:00.000Z"
    }
  ]
}
```

#### 3. Get Single Table

Get details of a specific table.

GET /table/:id

##### Headers

```
Authorization: Bearer <jwt_token>
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "tableNumber": "T001",
    "name": "Window Table 1",
    "capacity": 4,
    "isActive": true,
    "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### 4. Update Table

Update table details.

PUT /table/:id

##### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

##### Request Body

```json
{
  "name": "Patio Table 1",
  "capacity": 6,
  "isActive": true
}
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "tableNumber": "T001",
    "name": "Patio Table 1",
    "capacity": 6,
    "isActive": true,
    "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:30:00.000Z"
  }
}
```

#### 5. Delete Table

Delete a table and its QR code.

DELETE /table/:id

##### Headers

```
Authorization: Bearer <jwt_token>
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "message": "Table deleted successfully"
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "Table number already exists"
}
```

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to manage tables"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Table not found"
}
```

#### Notes

- Table numbers must be unique within a restaurant
- QR codes are automatically generated and stored in Google Cloud Storage
- QR codes link to the table's ordering page
- Only Restaurant_Admin users can manage tables
- Table capacity must be between 1 and 50
- Table names must be between 1 and 50 characters
- Table numbers must be between 1 and 10 characters

=== Registered Routes ===
Authentication Routes:
POST /api/v1/auth/signup # Register new restaurant admin
POST /api/v1/auth/login # Login for restaurant admin
POST /api/v1/auth/staff/login # Login for staff members
POST /api/v1/auth/staff-register # Complete staff registration with invite
POST /api/v1/auth/logout # Logout current user

User Routes:
GET /api/v1/users # Get user profile

Staff Management Routes:
POST /api/v1/staff/invite # Create staff invitation
GET /api/v1/staff # List all staff and invitations
PUT /api/v1/staff/:id # Update staff member details
DELETE /api/v1/staff/:id # Remove staff member or cancel invite

Table Management Routes:
POST /api/v1/table # Create new table with QR code
GET /api/v1/table # List all restaurant tables
GET /api/v1/table/:id # Get specific table details
PUT /api/v1/table/:id # Update table details
DELETE /api/v1/table/:id # Delete table and QR code
=======================

======================================================================

### Logout

Logout the currently authenticated user.

POST /auth/logout

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "message": "Logged out successfully"
  }
}
```

#### Error Responses

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "No token provided"
}
```

or

```json
{
  "status": "error",
  "message": "Invalid token"
}
```

#### Notes

- Requires a valid JWT token in the Authorization header
- Updates the user's last login timestamp
- # The client should remove the token from local storage after logout

======================================================================

### Get Current User

Get the currently authenticated user's details.

GET /auth/me

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "email": "user@example.com",
    "name": "John Doe",
    "role": "Restaurant_Admin",
    "phone": "+1234567890",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "isActive": true,
    "lastLogin": "2024-03-15T10:00:00.000Z",
    "createdAt": "2024-03-01T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### Error Responses

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "No token provided"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "User not found"
}
```

#### Notes

- Requires a valid JWT token in the Authorization header
- Returns fresh user data from the database
- # Includes all non-sensitive user information

=== Registered Routes ===
Authentication Routes:
...
GET /api/v1/auth/me # Get current user profile
...

======================================================================

### Scan QR Code

Get restaurant and table details from a QR code.

GET /qr/scan/:code

#### Parameters

```
code: Table ID from QR code
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "restaurant": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j2",
      "name": "The Great Restaurant",
      "address": {
        "street": "123 Main St",
        "city": "New York",
        "state": "NY",
        "postalCode": "10001",
        "country": "USA"
      },
      "contact": {
        "phone": "+1234567890",
        "email": "contact@restaurant.com"
      },
      "businessHours": [
        {
          "day": "Monday",
          "open": "09:00",
          "close": "22:00",
          "isClosed": false
        }
        // ... other days
      ],
      "settings": {
        "currency": "USD",
        "language": "en",
        "timezone": "UTC"
      },
      "isCurrentlyOpen": true
    },
    "table": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "number": "T001",
      "name": "Window Table 1",
      "capacity": 4
    }
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "QR code is required"
}
```

or

```json
{
  "status": "error",
  "message": "Restaurant is currently not active"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Invalid QR code"
}
```

or

```json
{
  "status": "error",
  "message": "Restaurant not found"
}
```

#### Notes

- No authentication required
- Returns current restaurant status (open/closed)
- Checks business hours for current day
- # Returns all necessary information for menu display

=== Registered Routes ===
...
QR Code Routes:
GET /api/v1/qr/scan/:code # Get restaurant details from QR code
...

======================================================================

### QR Login

Login or create a customer account after scanning a QR code.

POST /auth/qr-login

#### Request Body

```json
{
  "tableId": "65f1a2b3c4d5e6f7g8h9i0j1",
  "deviceId": "device-unique-identifier"
}
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "user": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "role": "Customer",
      "tableId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j3"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5...",
    "table": {
      "number": "T001",
      "name": "Window Table 1"
    }
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "Restaurant is not active"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Table not found"
}
```

#### Notes

- Creates a new customer user if device ID is not found
- Updates existing customer's table if device ID exists
- Generates a JWT token for API access
- # No password required for customer login

======================================================================

### Create Menu Category

Create a new menu category for the restaurant.

POST /menu/categories

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Request Body

```json
{
  "name": "Main Course",
  "description": "Primary dishes served as the main meal",
  "isActive": true,
  "sortOrder": 1
}
```

#### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "name": "Main Course",
    "description": "Primary dishes served as the main meal",
    "isActive": true,
    "sortOrder": 1,
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "A category with this name already exists"
}
```

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to perform this action"
}
```

#### Notes

- Requires Restaurant_Admin role
- Category names must be unique within a restaurant
- Sort order is auto-assigned if not provided
- Description is optional
- # Categories are active by default

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
...

======================================================================

### Get Menu Categories

Get all menu categories for a restaurant.

GET /menu/categories/:restaurantId

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
restaurantId: ID of the restaurant
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "categories": [
      {
        "id": "65f1a2b3c4d5e6f7g8h9i0j1",
        "name": "Main Course",
        "description": "Primary dishes served as the main meal",
        "isActive": true,
        "sortOrder": 1,
        "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
        "createdAt": "2024-03-15T10:00:00.000Z",
        "updatedAt": "2024-03-15T10:00:00.000Z"
      }
      // ... other categories
    ]
  }
}
```

#### Error Responses

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to access this restaurant"
}
```

#### Notes

- Accessible by Restaurant_Admin, Staff, and Customer roles
- Categories are sorted by sortOrder
- Customers only see active categories
- Staff and Admin see all categories
- # Requires authentication

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
...

======================================================================

### Delete Menu Category

Delete a menu category.

DELETE /menu/categories/:categoryId

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
categoryId: ID of the category to delete
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "message": "Category deleted successfully"
  }
}
```

#### Error Responses

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to delete this category"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Category not found"
}
```

#### Notes

- Only Restaurant_Admin can delete categories
- Can only delete categories from own restaurant
- Deleting a category is permanent
- # Should ensure no menu items are using this category before deletion

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
DELETE /api/v1/menu/categories/:categoryId # Delete a menu category
...

======================================================================

### Create Menu Item

Create a new menu item.

POST /menu/items

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Request Body

```json
{
  "name": "Margherita Pizza",
  "description": "Fresh tomatoes, mozzarella, basil, and olive oil",
  "price": 12.99,
  "categoryId": "65f1a2b3c4d5e6f7g8h9i0j1",
  "imageUrl": "https://example.com/images/margherita.jpg",
  "isActive": true,
  "isAvailable": true,
  "preparationTime": 15,
  "sortOrder": 1
}
```

#### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j2",
    "name": "Margherita Pizza",
    "description": "Fresh tomatoes, mozzarella, basil, and olive oil",
    "price": 12.99,
    "categoryId": "65f1a2b3c4d5e6f7g8h9i0j1",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j3",
    "imageUrl": "https://example.com/images/margherita.jpg",
    "isActive": true,
    "isAvailable": true,
    "preparationTime": 15,
    "sortOrder": 1,
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "An item with this name already exists"
}
```

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to perform this action"
}
```

#### Notes

- Only Restaurant_Admin can create menu items
- Item names must be unique within a restaurant
- Category must exist and belong to the restaurant
- Price must be non-negative
- Sort order is auto-assigned if not provided
- Items are active and available by default
- Preparation time is optional and in minutes
- # Image URL must be a valid URL

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
DELETE /api/v1/menu/categories/:categoryId # Delete a menu category
POST /api/v1/menu/items # Create new menu item
...

======================================================================

### Get Menu Items

Get all menu items for a restaurant.

GET /menu/items/:restaurantId

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
restaurantId: ID of the restaurant
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "items": [
      {
        "id": "65f1a2b3c4d5e6f7g8h9i0j1",
        "name": "Margherita Pizza",
        "description": "Fresh tomatoes, mozzarella, basil, and olive oil",
        "price": 12.99,
        "categoryId": "65f1a2b3c4d5e6f7g8h9i0j2",
        "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j3",
        "imageUrl": "https://example.com/images/margherita.jpg",
        "isActive": true,
        "isAvailable": true,
        "preparationTime": 15,
        "sortOrder": 1,
        "createdAt": "2024-03-15T10:00:00.000Z",
        "updatedAt": "2024-03-15T10:00:00.000Z"
      }
      // ... other items
    ]
  }
}
```

#### Error Responses

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to access this restaurant"
}
```

#### Notes

- Accessible by Restaurant_Admin, Staff, and Customer roles
- Items are sorted by category and then by sort order
- Customers only see active items
- Staff and Admin see all items
- Includes category information
- # Supports filtering by availability

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
DELETE /api/v1/menu/categories/:categoryId # Delete a menu category
POST /api/v1/menu/items # Create new menu item
GET /api/v1/menu/items/:restaurantId # Get all menu items
...

======================================================================

### Update Menu Item

Update menu item details.

PUT /menu/items/:itemId

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
itemId: ID of the menu item to update
```

#### Request Body

```json
{
  "name": "Updated Pizza Name",
  "description": "Updated description",
  "price": 14.99,
  "categoryId": "65f1a2b3c4d5e6f7g8h9i0j1",
  "imageUrl": "https://example.com/images/updated.jpg",
  "isActive": true,
  "isAvailable": true,
  "preparationTime": 20,
  "sortOrder": 2
}
```

All fields are optional, but at least one must be provided.

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j2",
    "name": "Updated Pizza Name",
    "description": "Updated description",
    "price": 14.99,
    "categoryId": "65f1a2b3c4d5e6f7g8h9i0j1",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j3",
    "imageUrl": "https://example.com/images/updated.jpg",
    "isActive": true,
    "isAvailable": true,
    "preparationTime": 20,
    "sortOrder": 2,
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:30:00.000Z"
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "An item with this name already exists"
}
```

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to update this menu item"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Menu item not found"
}
```

#### Notes

- Only Restaurant_Admin can update menu items
- Can only update items from own restaurant
- Item names must remain unique within restaurant
- Category must exist and belong to restaurant
- At least one field must be provided for update
- All fields are optional
- # Price must be non-negative if provided

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
DELETE /api/v1/menu/categories/:categoryId # Delete a menu category
POST /api/v1/menu/items # Create new menu item
GET /api/v1/menu/items/:restaurantId # Get all menu items
PUT /api/v1/menu/items/:itemId # Update menu item
...

======================================================================

### Delete Menu Item

Delete a menu item.

DELETE /menu/items/:itemId

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
itemId: ID of the menu item to delete
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "message": "Menu item deleted successfully"
  }
}
```

#### Error Responses

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to delete this menu item"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Menu item not found"
}
```

#### Notes

- Only Restaurant_Admin can delete menu items
- Can only delete items from own restaurant
- Deletion is permanent
- # Should ensure no active orders contain this item

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
DELETE /api/v1/menu/categories/:categoryId # Delete a menu category
POST /api/v1/menu/items # Create new menu item
GET /api/v1/menu/items/:restaurantId # Get all menu items
PUT /api/v1/menu/items/:itemId # Update menu item
DELETE /api/v1/menu/items/:itemId # Delete menu item
...

======================================================================

### Toggle Menu Item Availability

Toggle the availability status of a menu item.

PUT /menu/items/:itemId/availability

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
itemId: ID of the menu item to update
```

#### Request Body

```json
{
  "isAvailable": true
}
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "name": "Margherita Pizza",
    "description": "Fresh tomatoes, mozzarella, basil, and olive oil",
    "price": 12.99,
    "categoryId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j3",
    "imageUrl": "https://example.com/images/margherita.jpg",
    "isActive": true,
    "isAvailable": true,
    "preparationTime": 15,
    "sortOrder": 1,
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:30:00.000Z"
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "isAvailable is required"
}
```

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to update this menu item"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Menu item not found"
}
```

#### Notes

- Both Restaurant_Admin and Staff can toggle item availability
- Can only update items from own restaurant
- Useful for quickly marking items as out of stock
- Does not affect the item's active status
- # Customers will still see the item but marked as unavailable

=== Registered Routes ===
...
Menu Routes:
POST /api/v1/menu/categories # Create new menu category
GET /api/v1/menu/categories/:restaurantId # Get all menu categories
DELETE /api/v1/menu/categories/:categoryId # Delete a menu category
POST /api/v1/menu/items # Create new menu item
GET /api/v1/menu/items/:restaurantId # Get all menu items
PUT /api/v1/menu/items/:itemId # Update menu item
DELETE /api/v1/menu/items/:itemId # Delete menu item
PUT /api/v1/menu/items/:itemId/availability # Toggle item availability
...
