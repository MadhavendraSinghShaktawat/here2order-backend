{}

# Here2Order API Documentation

## Base URL

http://localhost:3000/api/v1

## Authentication

### Register Restaurant Admin

Register a new restaurant admin and create their restaurant.

======================================================================
POST /auth/signup

#### Request Body

json
{
"email": "restaurant1@example.com",
"password": "Password123!",
"name": "John Doe",
"phone": "+1234567890",
"restaurant": {
"name": "The Great Restaurant",
"address": {
"street": "123 Main St",
"city": "New York",
"state": "NY",
"postalCode": "10001",
"country": "USA"
},
"contact": {
"phone": "+1234567890",
"email": "contact@restaurant.com"
}
}
}

#### Response (201 Created)

json
{
"status": "success",
"data": {
"user": {
"id": "65f1a2b3c4d5e6f7g8h9i0j1",
"email": "restaurant1@example.com",
"name": "John Doe",
"role": "Restaurant_Admin",
"restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2"
},
"token": "eyJhbGciOiJIUzI1NiIsInR5..."
}
}

======================================================================

======================================================================

### Login

Login with email and password.

#### Request Body

json
{
"email": "restaurant1@example.com",
"password": "Password123!"
}

#### Response (200 OK)

json
{
"status": "success",
"data": {
"user": {
"id": "65f1a2b3c4d5e6f7g8h9i0j1",
"email": "restaurant1@example.com",
"name": "John Doe",
"role": "Restaurant_Admin",
"restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2"
},
"token": "eyJhbGciOiJIUzI1NiIsInR5..."
}
}
======================================================================
======================================================================

## Restaurant Management

### Get Restaurant Details

Get details of a specific restaurant.

GET /restaurants/:id

#### Headers

Authorization: Bearer <jwt_token>

#### Response (200 OK)

json
{
"status": "success",
"data": {
"id": "65f1a2b3c4d5e6f7g8h9i0j2",
"name": "The Great Restaurant",
"adminId": "65f1a2b3c4d5e6f7g8h9i0j1",
"address": {
"street": "123 Main St",
"city": "New York",
"state": "NY",
"postalCode": "10001",
"country": "USA"
},
"contact": {
"phone": "+1234567890",
"email": "contact@restaurant.com"
},
"businessHours": [
{
"day": "Monday",
"open": "09:00",
"close": "17:00",
"isClosed": false
},
// ... other days
],
"isActive": true,
"settings": {
"currency": "USD",
"language": "en",
"timezone": "UTC",
"tableCount": 0
}
}
}
======================================================================
======================================================================

POST /api/v1/staff/invite
{
"email": "staff@example.com",
"name": "Staff Member",
"phone": "+1234567890",
"position": "Waiter"
}

Get all staff members

GET /api/v1/staff

# ======================================================================

## Testing with Postman

### Setting Up Postman

1. Create a new Postman Collection named "Here2Order API"
2. Set up environment variables:
   - `BASE_URL`: http://localhost:3000/api/v1
   - `TOKEN`: (This will be automatically set after login)

### Test Flow

1. **Register Restaurant Admin**

   - Method: POST
   - URL: {{BASE_URL}}/auth/signup
   - Body: raw (JSON)
   - Copy the request body from the documentation above
   - Send request
   - Verify 201 status code
   - Save the token from response

2. **Login**

   - Method: POST
   - URL: {{BASE_URL}}/auth/login
   - Body: raw (JSON)
   - Use the email and password from registration
   - Send request
   - Verify 200 status code
   - Save the token using this script in the "Tests" tab:

   ```javascript
   if (pm.response.code === 200) {
     pm.environment.set("TOKEN", pm.response.json().data.token);
   }
   ```

3. **Get Restaurant Details**
   - Method: GET
   - URL: {{BASE_URL}}/restaurants/:id
   - Headers:
     ```
     Authorization: Bearer {{TOKEN}}
     ```
   - Use the restaurantId from login response
   - Send request
   - Verify 200 status code

### Error Scenarios to Test

1. **Registration Validation**

   - Try registering with invalid email format
   - Try registering with short password
   - Try registering with existing email

2. **Login Validation**

   - Try logging in with wrong password
   - Try logging in with non-existent email

3. **Authentication**
   - Try accessing protected routes without token
   - Try accessing protected routes with invalid token
   - Try accessing protected routes with expired token

### Response Status Codes

- 200: Success
- 201: Created
- 400: Bad Request (validation errors)
- 401: Unauthorized (invalid/missing token)
- 403: Forbidden (insufficient permissions)
- 404: Not Found
- 500: Internal Server Error

### Best Practices

1. Always check the response status code
2. Verify the response structure matches the documentation
3. Test with both valid and invalid data
4. Test authorization for all protected routes
5. Save commonly used values as environment variables
6. Use pre-request scripts for setup when needed
7. Use test scripts to validate responses

### Common Headers

## Staff Management

### 1. Invite Staff Member

Create a new staff invitation.

POST /staff/invite

#### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

#### Request Body

```json
{
  "email": "staff@example.com",
  "name": "John Smith",
  "phone": "+1234567890",
  "position": "Waiter"
}
```

#### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "email": "staff@example.com",
    "name": "John Smith",
    "phone": "+1234567890",
    "position": "Waiter",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "status": "Pending",
    "invitedBy": "65f1a2b3c4d5e6f7g8h9i0j3",
    "invitedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

### 2. Get All Staff Members

Get a list of all staff members and pending invites.

GET /staff

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": [
    {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "email": "staff@example.com",
      "name": "John Smith",
      "phone": "+1234567890",
      "position": "Waiter",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "status": "Pending",
      "invitedBy": "65f1a2b3c4d5e6f7g8h9i0j3",
      "invitedAt": "2024-03-15T10:00:00.000Z",
      "joinedAt": null
    },
    {
      "id": "65f1a2b3c4d5e6f7g8h9i0j4",
      "email": "active.staff@example.com",
      "name": "Active Staff",
      "phone": "+1234567891",
      "position": "Staff",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "status": "Active",
      "invitedBy": "",
      "invitedAt": "2024-03-14T10:30:00.000Z",
      "joinedAt": "2024-03-14T10:30:00.000Z"
    }
  ]
}
```

### 3. Update Staff Member

Update a staff member's details.

PUT /staff/:id

#### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

#### Request Body

```json
{
  "status": "Inactive",
  "position": "Senior Waiter",
  "phone": "+1234567899"
}
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "email": "staff@example.com",
    "name": "John Smith",
    "phone": "+1234567899",
    "position": "Senior Waiter",
    "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
    "status": "Inactive",
    "invitedBy": "65f1a2b3c4d5e6f7g8h9i0j3",
    "invitedAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T13:00:00.000Z"
  }
}
```

### Delete Staff Member

Delete a staff member or cancel an invitation.

DELETE /staff/:id

#### Headers

```
Authorization: Bearer <jwt_token>
```

#### Parameters

```
id: Staff member or invitation ID
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "67b1f98277fc25672dfd8276",
    "email": "staff@example.com",
    "name": "Staff Member",
    "message": "Staff member deactivated successfully"
    // or "Staff invitation deleted successfully"
  }
}
```

#### Error Responses

```json
// 400 Bad Request
{
  "status": "error",
  "message": "Invalid staff ID"
}

// 401 Unauthorized
{
  "status": "error",
  "message": "Authentication required"
}

// 403 Forbidden
{
  "status": "error",
  "message": "Not authorized to delete staff"
}

// 404 Not Found
{
  "status": "error",
  "message": "Staff member not found"
}
```

## Error Responses

### 400 Bad Request

```json
{
  "status": "error",
  "message": "Invalid input data",
  "details": "Email is required"
}
```

### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to perform this action"
}
```

### 404 Not Found

```json
{
  "status": "error",
  "message": "Resource not found"
}
```

### 500 Internal Server Error

```json
{
  "status": "error",
  "message": "Internal server error"
}
```

## Notes

- All timestamps are in ISO 8601 format
- All IDs are MongoDB ObjectIds
- JWT tokens expire in 7 days
- Staff invites expire in 48 hours
- Phone numbers should be in E.164 format
- Only Restaurant_Admin users can manage staff
- Staff invitations are valid for 48 hours
- Staff members can be in one of these states:
  - Pending: Invitation sent but not accepted
  - Active: Staff member has joined and is active
  - Inactive: Staff member has been deactivated

=== Registered Routes ===
Authentication Routes:
POST /api/v1/auth/signup # Register new restaurant admin
POST /api/v1/auth/login # Login for restaurant admin
POST /api/v1/auth/staff/login # Login for staff members
POST /api/v1/auth/staff-register # Complete staff registration with invite

User Routes:
GET /api/v1/users # Get user profile

Staff Management Routes:
POST /api/v1/staff/invite # Create staff invitation
GET /api/v1/staff # List all staff and invitations
PUT /api/v1/staff/:id # Update staff member details
DELETE /api/v1/staff/:id # Remove staff member or cancel invite

Table Management Routes:
POST /api/v1/table # Create new table with QR code
GET /api/v1/table # List all restaurant tables
GET /api/v1/table/:id # Get specific table details
PUT /api/v1/table/:id # Update table details
DELETE /api/v1/table/:id # Delete table and QR code
=======================

### Staff Login

Login as a staff member or accept staff invitation.

POST /auth/staff/login

#### Headers

```
Content-Type: application/json
```

#### Request Body (Regular Login)

```json
{
  "email": "staff@example.com",
  "password": "Password123!"
}
```

#### Request Body (First-time Login with Invitation)

```json
{
  "email": "staff@example.com",
  "password": "Password123!",
  "inviteToken": "abc123def456..."
}
```

#### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "user": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "email": "staff@example.com",
      "name": "John Smith",
      "role": "Staff",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "position": "Waiter"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5..."
  }
}
```

### Staff Registration

Complete staff registration with invitation token.

POST /auth/staff-register

#### Headers

```
Content-Type: application/json
```

#### Request Body

```json
{
  "email": "staff@example.com",
  "password": "Password123!",
  "inviteToken": "abc123def456...",
  "phone": "+1234567890" // Optional
}
```

#### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "user": {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "email": "staff@example.com",
      "name": "John Smith",
      "role": "Staff",
      "restaurantId": "65f1a2b3c4d5e6f7g8h9i0j2",
      "position": "Waiter"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5..."
  }
}
```

#### Error Responses

```json
// 400 Bad Request
{
  "status": "error",
  "message": "Invalid or expired invitation token"
}

// 400 Bad Request
{
  "status": "error",
  "message": "User already exists"
}
```

### Table Management

#### 1. Create Table

Create a new table with QR code.

POST /table

##### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

##### Request Body

```json
{
  "tableNumber": "T001",
  "name": "Window Table 1",
  "capacity": 4
}
```

##### Response (201 Created)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "tableNumber": "T001",
    "name": "Window Table 1",
    "capacity": 4,
    "isActive": true,
    "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### 2. Get All Tables

Get a list of all tables for the restaurant.

GET /table

##### Headers

```
Authorization: Bearer <jwt_token>
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": [
    {
      "id": "65f1a2b3c4d5e6f7g8h9i0j1",
      "tableNumber": "T001",
      "name": "Window Table 1",
      "capacity": 4,
      "isActive": true,
      "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
      "createdAt": "2024-03-15T10:00:00.000Z",
      "updatedAt": "2024-03-15T10:00:00.000Z"
    }
  ]
}
```

#### 3. Get Single Table

Get details of a specific table.

GET /table/:id

##### Headers

```
Authorization: Bearer <jwt_token>
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "tableNumber": "T001",
    "name": "Window Table 1",
    "capacity": 4,
    "isActive": true,
    "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:00:00.000Z"
  }
}
```

#### 4. Update Table

Update table details.

PUT /table/:id

##### Headers

```
Authorization: Bearer <jwt_token>
Content-Type: application/json
```

##### Request Body

```json
{
  "name": "Patio Table 1",
  "capacity": 6,
  "isActive": true
}
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "tableNumber": "T001",
    "name": "Patio Table 1",
    "capacity": 6,
    "isActive": true,
    "qrCodeUrl": "https://storage.googleapis.com/h2o-qrcodes/restaurant-id/T001.png",
    "createdAt": "2024-03-15T10:00:00.000Z",
    "updatedAt": "2024-03-15T10:30:00.000Z"
  }
}
```

#### 5. Delete Table

Delete a table and its QR code.

DELETE /table/:id

##### Headers

```
Authorization: Bearer <jwt_token>
```

##### Response (200 OK)

```json
{
  "status": "success",
  "data": {
    "id": "65f1a2b3c4d5e6f7g8h9i0j1",
    "message": "Table deleted successfully"
  }
}
```

#### Error Responses

##### 400 Bad Request

```json
{
  "status": "error",
  "message": "Table number already exists"
}
```

##### 401 Unauthorized

```json
{
  "status": "error",
  "message": "Authentication required"
}
```

##### 403 Forbidden

```json
{
  "status": "error",
  "message": "Not authorized to manage tables"
}
```

##### 404 Not Found

```json
{
  "status": "error",
  "message": "Table not found"
}
```

#### Notes

- Table numbers must be unique within a restaurant
- QR codes are automatically generated and stored in Google Cloud Storage
- QR codes link to the table's ordering page
- Only Restaurant_Admin users can manage tables
- Table capacity must be between 1 and 50
- Table names must be between 1 and 50 characters
- Table numbers must be between 1 and 10 characters

=== Registered Routes ===
Authentication Routes:
POST /api/v1/auth/signup # Register new restaurant admin
POST /api/v1/auth/login # Login for restaurant admin
POST /api/v1/auth/staff/login # Login for staff members
POST /api/v1/auth/staff-register # Complete staff registration with invite

User Routes:
GET /api/v1/users # Get user profile

Staff Management Routes:
POST /api/v1/staff/invite # Create staff invitation
GET /api/v1/staff # List all staff and invitations
PUT /api/v1/staff/:id # Update staff member details
DELETE /api/v1/staff/:id # Remove staff member or cancel invite

Table Management Routes:
POST /api/v1/table # Create new table with QR code
GET /api/v1/table # List all restaurant tables
GET /api/v1/table/:id # Get specific table details
PUT /api/v1/table/:id # Update table details
DELETE /api/v1/table/:id # Delete table and QR code
=======================
